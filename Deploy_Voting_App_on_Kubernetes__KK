The Nautilus DevOps team is running a voting app on their old infrastructure which they want to migrate to the Kubernetes cluster. 
They have already prepared the requirements related to the application stack. As per details given below deploy the voting app on the Kubernetes cluster:
1.	Create a namespace which should be named as vote.
2.	Create a service vote-service under the namespace you created. Port should be 5000, targetPort should be 80 and nodePort should be 31000. 
Service endpoint exposes deployment vote-deployment under namespace vote.
3.	Create a deployment vote-deployment under the namespace you created. 
Replicas count should be 1, the container name should be vote, use kodekloud/examplevotingapp_vote:before image ( use exact name of image as mentioned ) and containerPort should be 80.
4.	Create a service redis under the same namespace. 
Port should be 6379, targetPort should be 6379, its type should be ClusterIP service endpoint exposes deployment redis-deployment under namespace vote.
5.	Create a redis deployment redis-deployment under the same namespace. Repicas count should be 1. 
The container name should be redis use redis:alpine image ( use exact name as mentioned ). Volume type should be EmptyDir, volumeName should be redis-data and its mountPath should be /data
6.	Create a deployment worker under the same namespace. Its replicas count should be 1. 
The container name should be worker, use kodekloud/examplevotingapp_worker image ( use exact name of image as mentioned ).
7.	Create a service db under the same namespace. Port shold be 5432, targetPort should be 5432 and its type should be ClusterIP.
8.	Create a deployment db-deployment under the same namespace. Its replica count should be 1. 
The container name should be postgres, use postgres:9.4 image ( use exact name of image as mentioned ). 
Define ENV as first env name should be POSTGRES_USER its value should be postgres, second env name should be POSTGRES_PASSWORD its value should be postgres and third env name should be POSTGRES_HOST_AUTH_METHOD its value should be trust. 
Volume type should be EmptyDir, volumeName should be db-data and its mountPath should be /var/lib/postgresql/data.
9.	Create a deployment for result which should be named as result-deployment under the same namespace. Configure spec as replica should be 1. 
The container name should be result, use image kodekloud/examplevotingapp_result:before ( use exact name of image as mentioned ) and the containerPort should be 80.
10.	Create a service fo result which should be named as result-service under the same namespace. Configure spec as port should be 5001, targetPort should be 80 and nodePort should be 31001 and its type should be NodePort.
You can use any labels as per your choice.



---
apiVersion: v1
kind: Namespace
metadata:
  name: vote

---
apiVersion: v1
kind: Service
metadata:
    name: vote-service 
    namespace: vote
    labels:
        app: voting-app
        name: vote-service
spec:
    ports:
        - port: 5000
          targetPort: 80
          nodePort: 31000
    type: NodePort
    selector:
        app: voting-app
        name: voting-app-deployment
        
---
apiVersion: apps/v1
kind: Deployment
metadata:
    name: vote-deployment
    namespace: vote
    labels:
        app: voting-app
        name: voting-app-deployment
spec:
    replicas: 1
    selector:    
        matchLabels:
            app: voting-app
            name: voting-app-deployment
    template:
        metadata:
            labels:
                app: voting-app
                name: voting-app-deployment
        spec:
            containers:
            - name: vote
              image: kodekloud/examplevotingapp_vote:before
              ports:
              - containerPort: 80


---
apiVersion: v1
kind: Service
metadata:
    name: redis 
    namespace: vote
    labels:
        name: redis-service
        app: voting-app
spec:
    ports:
        - port: 6379
          targetPort: 6379
    type: ClusterIP
    selector:
        name: redis-deployment
        app: voting-app

---
apiVersion: apps/v1
kind: Deployment
metadata:
    name: redis-deployment
    namespace: vote
    labels:
        name: redis-deployment
        app: voting-app
spec:
    replicas: 1
    selector:    
        matchLabels:
            name: redis-deployment
            app: voting-app
    template:
        metadata:
            labels:
                name: redis-deployment
                app: voting-app
        spec:
            containers:
            - name: redis
              image: redis:alpine 
              ports:
                - containerPort: 6379
              volumeMounts:
              - mountPath: /data
                name: redis-data
            volumes:
            - name: redis-data
              emptyDir: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: worker
  namespace: vote
  labels:
    name: worker-deployment
    app: voting-app
spec:
  replicas: 1
  selector:
    matchLabels:
        name: worker-deployment
        app: voting-app
  template:
      metadata:
          labels:
              name: worker-deployment
              app: voting-app
      spec:
          containers:
          - name: worker
            image: kodekloud/examplevotingapp_worker

---
apiVersion: v1
kind: Service
metadata:
    name: db
    namespace: vote
    labels:
        app: voting-app
        name: postgres-service
spec:
    ports:
        - port: 5432
          targetPort: 5432
    type: ClusterIP
    selector:
        name: db-deployment
        app: voting-app

---
apiVersion: apps/v1
kind: Deployment
metadata:
    name: db-deployment
    namespace: vote
    labels:
      name: db-deployment
      app: voting-app   
spec:
    replicas: 1
    selector:
        matchLabels:
            name: db-deployment
            app: voting-app
    template:
        metadata:
            labels:
                name: db-deployment
                app: voting-app
        spec:
            containers:
            - name: postgres
              image: postgres:9.4
              ports:
              - containerPort: 5432
              env:
              - name: POSTGRES_USER
                value: postgres
              - name: POSTGRES_PASSWORD
                value: postgres
              - name: POSTGRES_HOST_AUTH_METHOD
                value: trust
              volumeMounts:
              - mountPath: /var/lib/postgresql/data
                name: db-data
            volumes:
            - name: db-data
              emptyDir: {}


---
apiVersion: apps/v1
kind: Deployment
metadata:
    name: result-deployment 
    namespace: vote
    labels:
        app: voting-app
        name: result-deployment
spec:
    replicas: 1
    selector:    
        matchLabels:
            app: voting-app
            name: result-deployment
    template:
        metadata:
            labels:
                app: voting-app
                name: result-deployment
        spec:
            containers:
            - name: result
              image: kodekloud/examplevotingapp_result:before
              ports:
                - containerPort: 80

---
apiVersion: v1
kind: Service
metadata:
    name: result-service
    namespace: vote
    labels:
        app: voting-app
        name: result-service

spec:
    ports:
        - port: 5001
          targetPort: 80
          nodePort: 31001
    type: NodePort
    selector:
        app: voting-app
        name: result-deployment
